package com.github.xt449.noise;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

/**
 * @author Jonathan Talcott (xt449/BinaryBanana)
 */
public class NoiseAttempt1 {

	private static final int IMG_SIZE = 1000; // this only controls the resolution of the image

//	private static final int IMG_SIZE = 1280;
//	private static final int SIZE = 32;

//	private static final int[] source = {
//			217, 153,  12,  63, 140, 113,  40,  41, 244,  43,  42,  95, 237,   5,  78, 174,
//			231, 144,  14, 180,  58, 110, 124, 192, 252, 175, 150, 166,   1, 233,  76, 214,
//			171, 165, 195, 127,  79,  16,  84,  80, 100,  44, 181, 167,  83, 223, 207, 219,
//			139, 243, 101, 239,  35,  18, 164,   6, 250, 187, 137,  92,  39, 154, 120,  11,
//			146,  70, 104, 191, 123, 183,  74,   9, 228, 148, 122, 142, 198,  15,  89,   7,
//			133,  21,  48, 226,  88,   0,  50, 213,  24, 157, 245,  90, 117,  86, 224, 126,
//			 69, 185, 158,  23,  98, 182, 131, 138,  75, 211,  55, 205,  97,  34, 102, 162,
//			186,  17,  33, 134, 220, 149,  26, 199, 190, 105,  87, 236, 197,  31,  65,  72,
//			247,  81, 106, 240,  36,  25, 179,  57,  82, 242,  68, 156, 234,  94,  13, 227,
//			141, 147,  19, 129, 212,  27,  45, 188, 221,  47, 194,  53, 210, 103, 215, 241,
//			249, 206,  30, 255,  77, 112, 170, 111, 253, 118, 145,  91, 132, 130,  61,  32,
//			203, 172,  66, 235, 119,  52,  96, 125,   4,  49, 232, 200,  60,   8,  54, 163,
//			155, 254, 152, 114, 176,  67, 136, 202, 107,  62,  10, 225, 159,  59, 121,  28,
//			 85,  51,  71, 177, 135, 238, 115, 196, 208,  56,  73, 116, 230, 108,  99,   2,
//			204, 218, 251, 160,  46, 161, 193, 151,  93, 178, 246, 222, 216, 143,  37,  38,
//			  3,  20, 169, 201, 128, 229, 184, 173, 209,  64, 189, 168, 109, 248,  29,  22,
//	};

//	private static final int[][] sources = {
//			{ 217, 153,  12,  63, 140, 113,  40,  41, 244,  43,  42,  95, 237,   5,  78, 174, },
//			{ 231, 144,  14, 180,  58, 110, 124, 192, 252, 175, 150, 166,   1, 233,  76, 214, },
//			{ 171, 165, 195, 127,  79,  16,  84,  80, 100,  44, 181, 167,  83, 223, 207, 219, },
//			{ 139, 243, 101, 239,  35,  18, 164,   6, 250, 187, 137,  92,  39, 154, 120,  11, },
//			{ 146,  70, 104, 191, 123, 183,  74,   9, 228, 148, 122, 142, 198,  15,  89,   7, },
//			{ 133,  21,  48, 226,  88,   0,  50, 213,  24, 157, 245,  90, 117,  86, 224, 126, },
//			{  69, 185, 158,  23,  98, 182, 131, 138,  75, 211,  55, 205,  97,  34, 102, 162, },
//			{ 186,  17,  33, 134, 220, 149,  26, 199, 190, 105,  87, 236, 197,  31,  65,  72, },
//			{ 247,  81, 106, 240,  36,  25, 179,  57,  82, 242,  68, 156, 234,  94,  13, 227, },
//			{ 141, 147,  19, 129, 212,  27,  45, 188, 221,  47, 194,  53, 210, 103, 215, 241, },
//			{ 249, 206,  30, 255,  77, 112, 170, 111, 253, 118, 145,  91, 132, 130,  61,  32, },
//			{ 203, 172,  66, 235, 119,  52,  96, 125,   4,  49, 232, 200,  60,   8,  54, 163, },
//			{ 155, 254, 152, 114, 176,  67, 136, 202, 107,  62,  10, 225, 159,  59, 121,  28, },
//			{  85,  51,  71, 177, 135, 238, 115, 196, 208,  56,  73, 116, 230, 108,  99,   2, },
//			{ 204, 218, 251, 160,  46, 161, 193, 151,  93, 178, 246, 222, 216, 143,  37,  38, },
//			{   3,  20, 169, 201, 128, 229, 184, 173, 209,  64, 189, 168, 109, 248,  29,  22, },
//	};

//	private static final int[][] sourcesWrapEdge = {
//			{ 217, 153,  12,  63, 140, 113,  40,  41, 244,  43,  42,  95, 237,   5,  78, 174, 217 },
//			{ 231, 144,  14, 180,  58, 110, 124, 192, 252, 175, 150, 166,   1, 233,  76, 214, 231 },
//			{ 171, 165, 195, 127,  79,  16,  84,  80, 100,  44, 181, 167,  83, 223, 207, 219, 171 },
//			{ 139, 243, 101, 239,  35,  18, 164,   6, 250, 187, 137,  92,  39, 154, 120,  11, 139 },
//			{ 146,  70, 104, 191, 123, 183,  74,   9, 228, 148, 122, 142, 198,  15,  89,   7, 146 },
//			{ 133,  21,  48, 226,  88,   0,  50, 213,  24, 157, 245,  90, 117,  86, 224, 126, 133 },
//			{  69, 185, 158,  23,  98, 182, 131, 138,  75, 211,  55, 205,  97,  34, 102, 162,  69 },
//			{ 186,  17,  33, 134, 220, 149,  26, 199, 190, 105,  87, 236, 197,  31,  65,  72, 186 },
//			{ 247,  81, 106, 240,  36,  25, 179,  57,  82, 242,  68, 156, 234,  94,  13, 227, 247 },
//			{ 141, 147,  19, 129, 212,  27,  45, 188, 221,  47, 194,  53, 210, 103, 215, 241, 141 },
//			{ 249, 206,  30, 255,  77, 112, 170, 111, 253, 118, 145,  91, 132, 130,  61,  32, 249 },
//			{ 203, 172,  66, 235, 119,  52,  96, 125,   4,  49, 232, 200,  60,   8,  54, 163, 203 },
//			{ 155, 254, 152, 114, 176,  67, 136, 202, 107,  62,  10, 225, 159,  59, 121,  28, 155 },
//			{  85,  51,  71, 177, 135, 238, 115, 196, 208,  56,  73, 116, 230, 108,  99,   2,  85 },
//			{ 204, 218, 251, 160,  46, 161, 193, 151,  93, 178, 246, 222, 216, 143,  37,  38, 204 },
//			{   3,  20, 169, 201, 128, 229, 184, 173, 209,  64, 189, 168, 109, 248,  29,  22,   3 },
//			{ 217, 153,  12,  63, 140, 113,  40,  41, 244,  43,  42,  95, 237,   5,  78, 174, 217 }
//	};

//	private static final int[][] sourcesZeroEdge = {
//			{ 217, 153,  12,  63, 140, 113,  40,  41, 244,  43,  42,  95, 237,   5,  78, 174, 0 },
//			{ 231, 144,  14, 180,  58, 110, 124, 192, 252, 175, 150, 166,   1, 233,  76, 214, 0 },
//			{ 171, 165, 195, 127,  79,  16,  84,  80, 100,  44, 181, 167,  83, 223, 207, 219, 0 },
//			{ 139, 243, 101, 239,  35,  18, 164,   6, 250, 187, 137,  92,  39, 154, 120,  11, 0 },
//			{ 146,  70, 104, 191, 123, 183,  74,   9, 228, 148, 122, 142, 198,  15,  89,   7, 0 },
//			{ 133,  21,  48, 226,  88,   0,  50, 213,  24, 157, 245,  90, 117,  86, 224, 126, 0 },
//			{  69, 185, 158,  23,  98, 182, 131, 138,  75, 211,  55, 205,  97,  34, 102, 162, 0 },
//			{ 186,  17,  33, 134, 220, 149,  26, 199, 190, 105,  87, 236, 197,  31,  65,  72, 0 },
//			{ 247,  81, 106, 240,  36,  25, 179,  57,  82, 242,  68, 156, 234,  94,  13, 227, 0 },
//			{ 141, 147,  19, 129, 212,  27,  45, 188, 221,  47, 194,  53, 210, 103, 215, 241, 0 },
//			{ 249, 206,  30, 255,  77, 112, 170, 111, 253, 118, 145,  91, 132, 130,  61,  32, 0 },
//			{ 203, 172,  66, 235, 119,  52,  96, 125,   4,  49, 232, 200,  60,   8,  54, 163, 0 },
//			{ 155, 254, 152, 114, 176,  67, 136, 202, 107,  62,  10, 225, 159,  59, 121,  28, 0 },
//			{  85,  51,  71, 177, 135, 238, 115, 196, 208,  56,  73, 116, 230, 108,  99,   2, 0 },
//			{ 204, 218, 251, 160,  46, 161, 193, 151,  93, 178, 246, 222, 216, 143,  37,  38, 0 },
//			{   3,  20, 169, 201, 128, 229, 184, 173, 209,  64, 189, 168, 109, 248,  29,  22, 0 },
//			{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 0 }
//	};

	private static final double[][] sourcesWrapEdge = new double[IMG_SIZE + 1][IMG_SIZE + 1];

	public static float getNoise(double x, double y) {
//		int ix = (int) map(x, 0, 1, 0, sourcesWrapEdge[0].length - 1);
//		int iy = (int) map(y, 0, 1, 0, sourcesWrapEdge[0].length - 1);
		int ix = (int) lerpFast(0, sourcesWrapEdge[0].length - 1, (float) x);
		int iy = (int) lerpFast(0, sourcesWrapEdge[0].length - 1, (float) y);

//		int c0 = sourcesWrapEdge[ix][iy];
//		int c1 = sourcesWrapEdge[ix+1][iy];
//		int c2 = sourcesWrapEdge[ix][iy+1];
//		int c3 = sourcesWrapEdge[ix+1][iy+1];

//		float c0 = sourcesWrapEdge[ix][iy];
//		float c1 = sourcesWrapEdge[ix+1][iy];
//		float c2 = sourcesWrapEdge[ix][iy+1];
//		float c3 = sourcesWrapEdge[ix+1][iy+1];

		double c0 = sourcesWrapEdge[ix][iy];
		double c1 = sourcesWrapEdge[ix + 1][iy];
		double c2 = sourcesWrapEdge[ix][iy + 1];
		double c3 = sourcesWrapEdge[ix + 1][iy + 1];

		float dx = (float) (x - Math.floor(x));
		float dy = (float) (y - Math.floor(y));

		float x0 = (float) lerp(c0, c1, dx);
		float x1 = (float) lerp(c2, c3, dx);

		float y0 = (float) lerp(c0, c2, dy);
		float y1 = (float) lerp(c1, c3, dy);

//		double x0 = map(dx, 0, 1, c0, c1);
//		double x1 = map(dx, 0, 1, c2, c3);
//
//		double y0 = map(dy, 0, 1, c0, c2);
//		double y1 = map(dy, 0, 1, c1, c3);

		float average = (x0 + x1 + y0 + y1) / 4;

		return average;
	}

	public static float lerp(float min, float max, float value) {
		return ((1 - value) * min) + (value * max);
	}

	public static double lerp(double min, double max, double value) {
		return ((1 - value) * min) + (value * max);
	}

	public static float lerpFast(float min, float max, float value) {
		return min + (value * (max - min));
	}

	public static double lerpFast(double min, double max, double value) {
		return min + (value * (max - min));
	}

	public static double map(double value, double minIn, double maxIn, double minOut, double maxOut) {
		return (((value - minIn) / (maxIn - minIn)) * (maxOut - minOut)) + minOut;
	}

	public static void main(String[] args) throws IOException {
		for(int y = 0; y < sourcesWrapEdge.length; y++) {
			for(int x = 0; x < sourcesWrapEdge.length; x++) {
				sourcesWrapEdge[x][y] = Math.random();
			}
		}

		final BufferedImage image = new BufferedImage(IMG_SIZE, IMG_SIZE, BufferedImage.TYPE_3BYTE_BGR);

		for(int y = 0; y < IMG_SIZE; y++) {
			for(int x = 0; x < IMG_SIZE; x++) {
				image.setRGB(x, y, Color.getHSBColor(getNoise(x / ((float) IMG_SIZE), y / ((float) IMG_SIZE)), 1.0F, 1.0F).getRGB());
			}
		}

		ImageIO.write(image, "png", new File("attemp1.png"));
	}
}
